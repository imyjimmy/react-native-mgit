// Objective-C API for talking to MGitBridge Go package.
//   gobind -lang=objc MGitBridge
//
// File is generated by gobind. Do not edit.

#ifndef __MGitBridge_H__
#define __MGitBridge_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class MGitBridgeCloneResult;
@class MGitBridgeCommitResult;
@class MGitBridgeHelpResult;
@class MGitBridgeLogResult;
@class MGitBridgeMCommitInfo;
@class MGitBridgeMGitSignature;
@class MGitBridgeMathResult;
@class MGitBridgePullResult;
@class MGitBridgePushResult;
@class MGitBridgeRepositoryInfo;

/**
 * CloneResult represents the result of a clone operation
 */
@interface MGitBridgeCloneResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) NSString* _Nonnull repoID;
@property (nonatomic) NSString* _Nonnull repoName;
@property (nonatomic) NSString* _Nonnull localPath;
@end

/**
 * CommitResult represents the result of a commit operation
 */
@interface MGitBridgeCommitResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) NSString* _Nonnull gitHash;
@property (nonatomic) NSString* _Nonnull mGitHash;
@property (nonatomic) NSString* _Nonnull commitMsg;
@end

/**
 * HelpResult represents the result of the help operation
 */
@interface MGitBridgeHelpResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) NSString* _Nonnull helpText;
@property (nonatomic) NSString* _Nonnull message;
@end

/**
 * LogResult represents the result of logging tests
 */
@interface MGitBridgeLogResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) NSString* _Nonnull result;
@property (nonatomic) NSString* _Nonnull message;
@end

/**
 * MCommitInfo represents simplified MGit commit information for iOS
 */
@interface MGitBridgeMCommitInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull mGitHash;
@property (nonatomic) NSString* _Nonnull gitHash;
@property (nonatomic) NSString* _Nonnull message;
// skipped field MCommitInfo.Author with unsupported type: MGitBridge.MGitSignature

// skipped field MCommitInfo.Committer with unsupported type: MGitBridge.MGitSignature

// skipped field MCommitInfo.ParentHashes with unsupported type: []string

@property (nonatomic) NSString* _Nonnull treeHash;
@end

/**
 * MGitSignature represents a signature in an MGit commit (simplified for iOS)
 */
@interface MGitBridgeMGitSignature : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull email;
@property (nonatomic) NSString* _Nonnull pubkey;
@property (nonatomic) NSString* _Nonnull when;
@end

/**
 * MathResult represents the result of simple math operations
 */
@interface MGitBridgeMathResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) long result;
@property (nonatomic) NSString* _Nonnull message;
@end

/**
 * PullResult represents the result of a pull operation
 */
@interface MGitBridgePullResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) long changes;
@end

/**
 * PushResult represents the result of a push operation
 */
@interface MGitBridgePushResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL success;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) NSString* _Nonnull commitHash;
@end

/**
 * RepositoryInfo represents information about a repository
 */
@interface MGitBridgeRepositoryInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull access;
@end

/**
 * Clone clones an MGit repository to the specified local path
 */
FOUNDATION_EXPORT MGitBridgeCloneResult* _Nullable MGitBridgeClone(NSString* _Nullable url, NSString* _Nullable localPath, NSString* _Nullable token);

/**
 * Help returns MGit help information for iOS
This function provides the same help text as the main MGit project
 */
FOUNDATION_EXPORT NSString* _Nonnull MGitBridgeHelp(void);

// skipped function NSLog with unsupported parameter or return types


/**
 * SimpleAdd performs a simple addition (for basic functionality testing)
 */
FOUNDATION_EXPORT long MGitBridgeSimpleAdd(long a, long b);

/**
 * TestLogging performs comprehensive logging tests for iOS debugging
 */
FOUNDATION_EXPORT NSString* _Nonnull MGitBridgeTestLogging(void);

#endif
